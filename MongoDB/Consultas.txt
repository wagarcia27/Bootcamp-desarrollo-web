OPERADORES MATEMÁTICOS

$eq: igual que (equal)
$ne: distinto de (not equal)
$gt: valores mayores que (greater than)
$gte: valores mayores o iguales que (greater than or equal)
$lt: valores menores que (lower than)
$lte: valores menores o iguales que (lower than or equal)

$in: sus valores se encuentran dentro del array especificado. 
     Por ejemplo: { "pais": { $in: ["España", "Francia"] }} mostrará todos los documentos 
     cuyo campo pais sea España o Francia

$nin: operación contraria a $in, obtiene los documentos cuyo valor NO esté en el array


EJEMPLO
{ key: value }

{ marca: "algo" }

{ precio: { $gte : 1000 } }

{ <campo1>: { <operador1>: <valor1> }, ... }

{ edad: { $gt: 30 } }

****************************************

 CONSULTAS
 - Obtener documentos que campo nombre sea "Andrea Le"
    { nombre: "Andrea Le" }

 - Obtener documentos que nombre NO sea "Andrea Le" 
    { nombre: { $ne: "Andrea Le" } }

- Obtener documentos donde cursos sea menor a 3
    { cursos: { $lte: 3 } }

- Obtener documentos que al menos una de las notas sea mayor a 4.5 y menor a 5 
    { notas: { $elemMatch: { $gt: 4.5, $lt: 5 } } }

- Obtener docunentos cuyo ID sea igual a :
   { _id: ObjectId('62466fe7c1233ba7045a9d4f') }

- Obtener documentos con SKU terminados en 789
    { sku: { $regex: /789$/ } }

- Documentos con SKU que comienzan con ABC (no importa Mayúsculas o Minúsuclas)
    { sku: { $regex: /^ABC/i } }

- Documentos que en descripción contiene la letea S
    { descripcion: { $regex: /S/ } }


 OR
  { $or: [{ marca: "Apple "},{ nombre: "Emiliano" },{ edad: { $eq: 30 }}] }

 Ejemplo de OR
  { status: "A", $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ] }

  Ejericio:
- Alquiler de autos
- Crear la colección correspondiente (sólo una)
- Insertar al menos 5 documentos (con los datos necesarios)

db.createCollection("coleccion_prueba") : para crear una coleccion
show collections
db.coleccion_prueba.drop() : para eliminar una coleccion
db.dropDatabase() : elimina la base de datos donde esta parado
db.miColeccion.find().limit(2).skip(1) : para encontrar
db.miColeccion.updateOne({precio:{$lt:700}}, {$set:{valoracion:"5 estrellas"}})
db.miColeccion.updateMany({precio:{$lt:700}}, {$set:{valoracion:"3 estrellas"}})
db.miColeccion.deleteMany({precio:400})
db.miColeccion.deleteOne({precio:600})
db.miColeccion.updateOne({precio:345}, {$unset:{precio:""}}) : desagregar
db.miColeccion.updateOne({nombre:"luis"}, {$set:{age:18}}) : agregar
mes a mes no descuento
6 meses 10%
1 anual 25%
mensualidad: 30usd
db.pagos.updateOne({_id:1},{$set:{pago:{fechaInicial:"2022 04 05",fechaFinal:"2022 05 05"}}})
db.pagos.updateOne({_id:1},{$rename:{'pago':'durabilidad'}}) : para actualizar la key

db.pagos.updateOne({_id:1},{$set:{horario:"Dia"}}) : para cuando la coleccion existe agregra uno nuevo a cada documento
db.pagos.updateOne({_id:002},{$set:{mensualidad:"semestral",durabilidad:{fechaInicial: '2022 01 05', fechaFinal: '2022 06 05'},fechaPago:{fecha:new Date().toDateString()},horario:"Tarde"}}) : para fechas
db.pagos.updateOne({_id:4},{$set:{durabilidad:{fechaInicial: '2022 04 01', fechaFinal: '2022 05 01'}}}) : actualizar datos

no cambiar el id que crea mongo por defecto
el porcentaje calculable no se guarda en la base de datos

db.personas.updateMany({nombre:{$regex:/a$/i}},{$set:{sexo:"femenino"}}) --> si termina en a agregale sexo femenino
db.personas.insertOne({nombre:"William", apellido:"Garcia", pais: "Colombia", deportes: "futbol", casado: true, fec_nacimiento:"27/11/1997", idioma:"Spanish"}) -> agregar dato
db.personas.updateMany({sexo:{$exists:false}},{$set:{sexo:"indefinido"}}) --> si el sexo no existe agregale uno indefinido
db.personas.find({$or:[{deportes:{$ne:"futbol"}},{pais:"rusia"}]},{nombre:1 , apellido:1}) -> mostrar sólo los nombre y apellidos de aquellas personas que no tienen como deporte futbol, ó son de Rusia
db.personas.find({$or:[{pais:"Argentina"},{pais:"Colombia"}],deportes:"voley",idioma:{$ne:"Portuguese"}}).limit(5).skip(5)-> mostrar las segundas 5 personas que sean de Argentina o Colombia y que deportes sea voley y no hablen Portuguese
db.personas.deleteMany({$or:[{pais:"China"},{casado:"false"}]}) -> Eliminar las personas cuyo país sea China o no sea casados.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Operadores Matemáticos: 

* $eq -- igual que
* $ne -- diferente que
* $gt -- mayor que
* $gte -- mayor o igual que
* $lt -- menor que
* lte -- menor o igual que


ejemplos:

{precio: 1000}---- busca los elementos que tienen precio 1000

{precio: {$gt:1000}}--- busca elementos que tienen precio mayor a 1000

{marca: {$ne:"Apple"}}--- busca los elementos que tienen marca diferente a Apple

{marca:"Apple" , precio:{$gt:1000}}--- busca elementos que tienen marca Apple y precio mayor a 1000

{precio:{$gt:200,$lt:1000}} --- busca los elementos que tienen precio mayor a 200 y menor a 1000

{_id:ObjectId('maaklsafmjas41414faf')} --- busca el elemento del ID: maaklsafmjas41414faf


{$or: [{marca:"Apple"},{precio:1000},color:"verde"]}--- busca los elementos que tengan marca Apple o precio 1000 o color verde

{marca:"Apple",$or:[{precio:1000}, {color:"verde}]}--- busca los elementos de marca Apple  y además, que tengan precio 1000 o color verde

{marca: {$exist:true}} --- busca todos los elementos que tienen marca

{nombre: {$regex:/s$/}} --- busca los elementos que tengan nombre terminado en "s"

{nombre: {$regex:/^z/i}} --- busca los elementos que tengan nombre que inicie con "z"

{nombre: {$regex: /a/i}} --- busca los elementos que tengan la letra "a" dentro del nombre (con la letra i al final significa que no distingue entre minusculas y mayusculas)

{$or:[{$regex:/^a/i}, {precio:{$lt:5000}}]}


en la opcion de project:

{nombre:1,marca:1}--- solo muestra el nombre y marca dentro del filtro (tambien muestra los ID)

{nomre:1,marca:1,_id:0}--- solo muestra el nombre y marca dentro del filtro (sin ID)

en la opcion sort: 

{precio:1}--- ordena de menor a mayor (tamnbien se puede con strigns.. ordenaria en orden alfabetico)

{precio:-1} --- ordena de mayor a menor (tambien se puede con strings.. ordenaria de z-a)

________________________________________________________________________________________________________________

CRUD

Create
Read
Update
Delete
